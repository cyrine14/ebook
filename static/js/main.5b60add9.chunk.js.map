{"version":3,"sources":["components/Books.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Books","bookItems","this","props","books","map","book","className","key","id","href","onClick","handleAddToCard","src","sku","alt","title","price","e","Component","Filter","count","value","sort","onChange","handleChangeSort","genre","handleChangeGenre","App","state","filteredBooks","bind","fetch","then","res","json","data","setState","target","listBooks","a","b","filter","book_genre","indexOf","length","handleAddToCart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b60add9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Books extends Component {\r\n\r\n   \r\n   \r\n    render() {\r\n        const bookItems = this.props.books.map(book => (\r\n            <div className=\"col-md-4\" key={book.id}>\r\n            <div className=\"thumbnail text-center\">\r\n              <a\r\n                href={`#${book.id}`}\r\n                onClick={ this.props.handleAddToCard}>\r\n\r\n                <img className=\"image-book\" src={`/books/${book.sku}.png`} alt={book.title} />\r\n                <p>{book.title}</p>\r\n              </a>\r\n              <div>\r\n                  <b>{book.price} TND</b>\r\n                  &nbsp;\r\n                  &nbsp;\r\n                  &nbsp;\r\n                  <button className=\"btn btn-outline-warning\" onClick={(e)=> this.props.handleAddToCard(e, book)}> Add to Cart</button>\r\n                 \r\n              </div>\r\n         \r\n            </div>\r\n          </div>\r\n        )\r\n        )\r\n        return (\r\n         <div className=\"row\">\r\n            {bookItems}\r\n        </div>\r\n        )\r\n    }\r\n  }\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Filter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">{`${this.props.count} Books found.`}</div>\r\n        <div className=\"col-md-4\">\r\n          <label>\r\n            Order by\r\n            <select\r\n              className=\"form-control\"\r\n              value={this.props.sort} onChange={this.props.handleChangeSort}>\r\n              <option value=\"\">Select</option>\r\n              <option value=\"highest\">Highest to lowest</option>\r\n              <option value=\"lowest\">Lowest to highest</option>     \r\n            </select>\r\n          </label>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <label>\r\n            {\" \"}\r\n            Filter Genre\r\n            <select\r\n              className=\"form-control\" value={this.props.genre} onChange={this.props.handleChangeGenre} >\r\n              <option value=\"\">ALL</option>\r\n              <option value=\"Fantasy\">Fantasy</option>\r\n              <option value=\"Adventure\">Adventure</option>\r\n              <option value=\"Romance\">Romance</option>\r\n              <option value=\"Contemporary\">Contemporary</option>\r\n              <option value=\"Dystopian\">Dystopian</option>\r\n              <option value=\"Mystery\">Mystery</option>\r\n              <option value=\"Thriller\">Thriller</option>\r\n              \r\n            </select>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Books from './components/Books';\nimport Filter from './components/Filter';\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = { books:[], filteredBooks:[] }\n    this.handleChangeSort = this.handleChangeSort.bind(this);\n    this.handleChangeGenre = this.handleChangeGenre.bind(this);  \n  }\n\ncomponentWillMount(){\n  fetch(\"http://localhost:8000/books\").then(res => res.json())\n  .then(data => this.setState({\n    books: data,\n    filteredBooks: data\n  }));\n}\nhandleChangeSort(e){\n  this.setState({sort: e.target.value});\n  this.listBooks();\n}\nhandleChangeGenre(e){ \n  this.setState({genre: e.target.value});\n  this.listBooks();\n}\nlistBooks(){\n  this.setState(state => {\n    if(state.sort !==''){\n      state.books.sort((a,b)=>(state.sort==='lowest')? (a.price <b.price? 1:-1): (a.price>b.price))\n    } else {\n      state.books.sort((a,b)=>(a.id <b.id? 1:-1));\n    }\n    if (state.genre !==''){\n      return {filteredBooks: state.books.filter(a=>a.book_genre.indexOf(state.genre)>=0)}\n\n    }\n    return {filteredBooks: state.books};\n  })\n}\n  render() {\n    return (\n\n    <div className=\"container\">\n      <h1>E-Books</h1>  \n      \n    \n      <hr />\n          <div className=\"row\">\n            <div className=\"col-md-9\">\n<Filter genre={this.state.genre} sort={this.state.sort} handleChangeGenre={this.handleChangeGenre} handleChangeSort={this.handleChangeSort} count={this.state.filteredBooks.length}/> \n<hr/>\n<Books books={this.state.filteredBooks} handleAddToCart={this.handleAddToCart} /> \n            </div>\n            <div className=\"col-md-3\">\n          \n            </div> \n          </div>\n        </div>\n\n);\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}